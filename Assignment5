# Author: Tony You
# Date: 3/8/2020
# Assignment 5 - Service Monitor

function checkStatus() {
    # Service Name paramater
   param (
       $ServiceName
   )

   $arrService = Get-Service -Name $ServiceName
   if ($arrService.Status -ne "Running")
   {
       Write-Host "Service"$ServiceName" is currently not running, the following are the infos about your selected service."
       " ----------------------------------------------- " 
       sleep 1
       Get-Service -Name $ServiceName
   }
   if ($arrService.Status -eq "running")
   { 
       Write-Host "$ServiceName service is already started"
   }
   
}

function startService() {
    # Service Name paramater
    param (
        $ServiceName
    )

    $arrService = Get-Service -Name $ServiceName
    if ($arrService.Status -ne "Running")
    {
        Start-Service -Name "$ServiceName" -Confirm
        Write-Host "Starting " $ServiceName " service..." 
        " ---------------------- " 
        sleep 1
        $result = if (($_ | get-service).Status -eq "Running") {"success"} else {"failure"}
        Write-Host "Service $($_.Name) has been restarted with $result."
    }
    if ($arrService.Status -eq "running")
    { 
        Write-Host "$ServiceName service is already started"
    }
}

function checkStartupType {
    param (
        $ServiceName
    )

    $arrService = Get-Service | Select-Object -Property Name,Status,StartType | where-object {$_.Name -eq "$ServiceName"} | Format-Table -auto
    Write-Host "Displaying the startupType info of the selected service"

    Get-Service | Select-Object -Property Name,Status,StartType | where-object {$_.Name -eq "$ServiceName"} | Format-Table -auto
    if ($arrService.StartType -ne "Automatic")
    {
        Set-Service -Name $ServiceName -StartupType Automatic -Confirm
        Write-Host "Switching service" $ServiceName " start type to automatic" 
        " ---------------------- " 
        sleep 1
        $result = if ($arrSerive.StartType -eq "Automatic") {"success"} else {"failure"}
        Write-Host "Service $($_.Name) has been changed with $result."
    }
    if ($arrService.StartType -eq "Automatic")
    { 
        Write-Host "$ServiceName service is already set to start automatically"
    }
    
}

function addService()
{
    $params = @{
         Name = Read-Host -Prompt "Please Enter Your Service Name"
         BinaryPathName = Read-Host -Prompt "Please Enter Your Service Binary Path"
         DependsOn = Read-Host -Prompt "What's Your Service Depends on"
         DisplayName = Read-Host -Prompt "Please Enter Your Service Display Name"
         StartupType = Read-Host -Prompt "Please Enter Your Service Startup Type"
         Description = Read-Host -Prompt "Please Enter Your Service Description"
}
    New-Service @params
}

function main()
{ #Start of function
[int]$Option = 0

while ( $Option -lt 1 -or $Option -gt 4 )
{ #Start of While loop
    Write-Host "#######################################################" -ForegroundColor Green
    Write-Host "#           Assignment 5 - Service Monitor            #" -ForegroundColor Yellow
    Write-Host "#                    Tony You                         #"
    Write-Host "#######################################################" -ForegroundColor Green
    Write-Host "# 1. Check Service Status;                            #"
    Write-Host "# 2. Start Service;                                   #"
    Write-Host "# 3. Add Service;                                     #"
    Write-Host "# 4. Quit and exit;                                   #"
    Write-Host "#######################################################" -ForegroundColor Green
  
[Int]$Option = read-host "Please enter an option 1 to 4" 
} #End of While loop

Switch( $Option )
{ #Start of switch statement
  1{$ServiceName = Read-Host -Prompt "Please Enter Your Service Name"
    checkStatus($ServiceName)
    if (($prompt = Read-Host -Prompt "Would you like to start the Service? (Y/N)") -eq "Y") 
    {
        startService($ServiceName)
    }else{ 
        Write-host "Script will return back to menu in 3 seconds" -ForegroundColor Green
        sleep 3
        main
         }
    }
  2{$ServiceName = Read-Host -Prompt "Please Enter Your Service Name"
    checkStartupType($ServiceName)
    Write-host "Script will return back to menu in 3 seconds" -ForegroundColor Green
    sleep 3
    main}
  3{addService
    Write-host "Script will return back to menu in 3 seconds" -ForegroundColor Green
    sleep 3
    main}
  4{Write-host "Script Terminated!!!" -ForegroundColor Green
      Break}
} #End of switch statement

} #End of function

main
