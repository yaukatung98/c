#lang racket

;1. Compose

;     Input: L - list of pairs
;            S - list of pairs

;	E.g. L '((a b)(d e))
;	     S '((e f)(b c))

;      (L * S) '((a c)(d f))

(define compose_get
  (lambda (L S)
    (cond [(empty? S) '()]
	  [(equal? (car(cdr(car L))) (car(car S))) (list(car(car L)) (car(cdr(car S))))]; do the pairs match
	  [else (compose_get L (cdr S))])))

(define compose_equal?
    (lambda (L S)
    (cond [(empty? S) #f]
	  [(equal? (car(cdr(car L))) (car(car S)) )#t]; do the pairs match
	  [else (compose_equal? L (cdr S))])))

(define (compose L S)
    (cond [(empty? L) '()]
          [(compose_equal? L S) (cons(compose_get L S) (compose(cdr L) S))]
          [else (compose (cdr L) S)]
        ))


;(compose '((a b)(d e)) '((e f)(b c)))

;2. Reflexive Closure

;	Input: L - list of pairs
;	       S - list interpeted as a binary relation

;	Return: Reflexive Closure of L

;	E.g. L '((1 1)(2 2)(4 4)(1 2))
;	     S '(1 2 3 4)
;	   R-C '((1 1)(2 2)(3 3)(4 4)(1 2))

(define Reflexive_Closure_Get
  (lambda (L S)
    (cond [(empty? L) '()]
	  [(equal? (list (car S) (car S)) (car L)) (list (car S) (car S))]; do the pairs match
	  [else (Reflexive_Closure_Get (cdr L) S)])))

(define Reflexive_Closure_Equal?
    (lambda (L S)
    (cond [(empty? L) #f]
	  [(equal? (list (car S) (car S)) (car L)) #t]; do the pairs match
	  [else (Reflexive_Closure_Equal? (cdr L) S)])))

(define (Reflexive_Closure L S)
    (cond [(empty? S) '()]
          [(Reflexive_Closure_Equal? L S) (cons(Reflexive_Closure_Get L S) (Reflexive_Closure L (cdr S)))]
          [else (cons(list (car S) (car S)) (Reflexive_Closure L (cdr S)))]
        ))

(Reflexive_Closure '((1 1)(2 2)(4 4)(1 2)) '(1 2 3 4))

;3. Symmetric Closure

;	Input: L - list of pairs
	
;	Return: Symmetric Closure of L

;	E.g. L '((a b)(c c)(d e))
;	   S-C '((a b)(c c)(d e)(b a)(e d))

(define (Symmetric_Closure L)
  (cond [(empty? L) '()]
        [(equal? (car(car L)) (car(cdr(car L)))) (cons(list (car(car L)) (car(cdr(car L)))) (Symmetric_Closure (cdr L)))]
        [else (append (cons(list (car(car L)) (car(cdr(car L)))) (Symmetric_Closure (cdr L))) (list(list (car(cdr(car L))) (car(car L)))))]
        ))

;(Symmetric_Closure '((a b)(c c)(d e)))

;4. Transitive Closure

;       Input: L - list of pairs

;              n - postive integer that represent cardinality of L


(define (union list1 list2)
  (if (empty? list1)
      list2
        (if (member (car list1) list2)
            (union (cdr list1) list2)
            (cons (car list1) (union (cdr list1) list2)))))

(define (Transitive_Closure L)
  (cond [(empty? L) '()]
        [else(union(union L (compose L L)) (Transitive_Closure (cdr L)))]))

;(Transitive_Closure '((1 2) (2 3) (3 4) (1 5)))
